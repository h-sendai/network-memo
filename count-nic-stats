#!/usr/bin/env python3

# Usage: count-nic-stats eth0

import os
import sys
import time
import signal
import datetime
import subprocess
import re

def usage():
    msg = 'Usage: count-nic-stats NIC'
    sys.stderr.write(msg + '\n')

def sig_int(signo, frame):
    sys.exit(0)

def get_n_cpu(line):
    return len(line.split())

def get_lines(nic):
    l = subprocess.run(['ethtool', '-S', nic], capture_output = True, check = True)
    lines = l.stdout.decode()
    # lines example:
    # NIC statistics:\n
    # rx_packets: 3991913562\n
    # tx_packets: 177626818\n
    # rx_bytes: 6041719745834\n
    # Convert to:
    # [
    #   ['NIC', 'statistics:'],
    #   ['rx_packets:' '3991913562']
    #   ['tx_packets:' '177626818']
    #   ['rx_bytes:'   '6041719745834']
    # ]
    rv = [ x.split() for x in lines.splitlines() ]

    return rv

def is_int(s):
    try:
        x = int(s)
    except ValueError as e:
        return False

    return True

def subtract_lines(first, second):
    rv = []
    for (a, b) in zip(first, second):
        if is_int(a):
            d = int(b) - int(a)
            rv.append(str(d))
        else:
            rv.append(a)

    return rv

def calc_print(prev, current):
    now = datetime.datetime.now().strftime('%T')
    for (a, b) in zip(prev, current):
        print(now + ' ', end = '')
        diff = subtract_lines(a, b)
        for i in diff:
            print('%s ' % (i), end = '')
        sys.stdout.flush()
        print()

def main():
    if len(sys.argv) != 2:
        usage()
        exit(1)
    nic = sys.argv[1]

    sleep_time = 1

    signal.signal(signal.SIGINT, sig_int)

    prev = get_lines(nic)
    # get_lines() return value
    # [ [ ... , ... , ... ], [ ... , ... , ... ], ... ]
    #   ^^^^ 1st line ^^^^   ^^^^ 2nd line ^^^^ ... 

    time.sleep(sleep_time)
    
    while True:
        current = get_lines(nic)
        calc_print(prev, current)
        prev = current
        time.sleep(sleep_time)

if __name__ == '__main__':
    main()
